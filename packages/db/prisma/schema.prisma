// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      Int                      @id @default(autoincrement())
  uuid                    String                   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                    String?
  email                   String?                  @unique
  image                   String?
  emailVerified           DateTime?
  createdAt               DateTime                 @default(now())
  samples                 Sample[]
  experiments             Experiment[]
  clipEvaluations         ClipEvaluation[]
  sampleOutputEvaluations SampleOutputEvaluation[]
  accounts                Account[]
  sessions                Session[]
  authenticator           Authenticator[]
  isAdmin                 Boolean                  @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  id                   String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  credentialID         String  @unique
  userId               Int
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experiment {
  id                   Int            @id @default(autoincrement())
  name                 String
  description          String?
  createdAt            DateTime       @default(now())
  parameters           Json           @default("{}")
  processStatus        String
  processStatusHistory String[]
  samples              Int[]
  userId               Int
  user                 User           @relation(fields: [userId], references: [id])
  isReadyForEvaluation Boolean        @default(false)
  isPublic             Boolean        @default(false)
  forkFromExperimentId Int?
  forkFromExperiment   Experiment?    @relation("Experiment_SampleOutput_fromExperiment", fields: [forkFromExperimentId], references: [id])
  forkToExperiments    Experiment[]   @relation("Experiment_SampleOutput_fromExperiment")
  sampleOutputs        SampleOutput[]
}

model Sample {
  id                   Int            @id @default(autoincrement())
  data                 Json
  createdAt            DateTime       @default(now())
  userId               Int
  user                 User           @relation(fields: [userId], references: [id])
  isPublic             Boolean        @default(false)
  sampleOutputs        SampleOutput[]
  recordingVideoUrl    String         @default("")
  meetingTitle         String         @default("")
  transcriptionFileUrl String         @default("")
}

model SampleOutput {
  id           Int                      @id @default(autoincrement())
  experimentId Int
  experiment   Experiment               @relation(fields: [experimentId], references: [id])
  sampleId     Int
  sample       Sample                   @relation(fields: [sampleId], references: [id])
  status       String                   @default("created")
  data         Json                     @default("{}")
  createdAt    DateTime                 @default(now())
  clips        Clip[]
  evaluations  SampleOutputEvaluation[]
  jwtSecret    String                   @default(uuid())
}

model Clip {
  id             Int              @id @default(autoincrement())
  sampleOutputId Int
  sampleOutput   SampleOutput     @relation(fields: [sampleOutputId], references: [id])
  data           Json
  videoUrl       String           @default("")
  headline       String           @default("")
  description    String           @default("")
  duration       Int              @default(0)
  tags           String[]
  startTime      Int              @default(0)
  endTime        Int              @default(0)
  scores         Json             @default("{}")
  payload        Json             @default("{}")
  createdAt      DateTime         @default(now())
  evaluations    ClipEvaluation[]
}

model ClipEvaluation {
  id        Int      @id @default(autoincrement())
  clipId    Int
  clip      Clip     @relation(fields: [clipId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  score     Int
  comment   String?
}

model SampleOutputEvaluation {
  id             Int          @id @default(autoincrement())
  sampleOutputId Int
  sampleOutput   SampleOutput @relation(fields: [sampleOutputId], references: [id])
  userId         Int
  user           User         @relation(fields: [userId], references: [id])
  createdAt      DateTime     @default(now())
  score          Int
  comment        String?
}
